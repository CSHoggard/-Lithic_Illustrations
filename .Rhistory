dfd <- nrow(data) - 1
if (!type %in% c("t", "norm", "euclid")){
message("unrecognized ellipse type")
ellipse <- rbind(as.numeric(c(NA, NA)))
} else if (dfd < 3){
ellipse <- rbind(as.numeric(c(NA, NA)))
} else {
if (type == "t"){
v <- MASS::cov.trob(data[,vars])
} else if (type == "norm"){
v <- cov.wt(data[,vars])
} else if (type == "euclid"){
v <- cov.wt(data[,vars])
v$cov <- diag(rep(min(diag(v$cov)), 2))
}
shape <- v$cov
center <- v$center
chol_decomp <- chol(shape)
if (type == "euclid"){
radius <- level/max(chol_decomp)
} else {
radius <- sqrt(dfn * qf(level, dfn, dfd))
}
angles <- (0:segments) * 2 * pi/segments
unit.circle <- cbind(cos(angles), sin(angles))
ellipse <- t(center + radius * t(unit.circle %*% chol_decomp))
}
ellipse <- as.data.frame(ellipse)
colnames(ellipse) <- vars
return(ellipse)
}
calculate_ellipseax <- function(ell){
if (any(is.na(ell))) {
na <- rep(NA, 2)
seg <- data.frame(x=na, y=na, xend=na, yend=na)
return(seg)
}
ell.al <- coo_align(ell)
ell.ids <- c(which.min(ell.al[, 1]), which.max(ell.al[, 1]),
which.min(ell.al[, 2]), which.max(ell.al[, 2]))
seg <- ell[ell.ids, ]
seg <- dplyr::bind_cols(slice(seg, c(1, 3)), slice(seg, c(2, 4)))
colnames(seg) <- c("x", "y", "xend", "yend")
seg
}
##### end PCA plotters
Â© 2019 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
View(PCcontrib)
hearts %T>%                    # A toy dataset
stack() %>%                  # Take a family picture of raw outlines
fgProcrustes() %>%           # Full generalized Procrustes alignment
coo_slide(ldk = 2) %T>%      # Redefine a robust 1st point between the cheeks
stack() %>%                  # Another picture of aligned outlines
efourier(6, norm=FALSE) %>%  # Elliptical Fourier Transforms
PCA() %T>%                   # Principal Component Analysis
plot_PCA(~aut) %>%           # A PC1:2 plot
LDA(~aut) %>%                # Linear Discriminant Analysis
plot_CV()                    # And the confusion matrix after leave one out cross validation
devtools::load_all()
# install.packages("devtools")
devtools::install_github("MomX/Momocs")
library("MomX", lib.loc="~/R/win-library/3.4")
install.packages("Momocs")
library("Momocs", lib.loc="~/R/win-library/3.4")
hearts
plot(hearts)
stack(hearts)
install.packages(c("callr", "carData", "caTools", "checkmate", "classInt", "clipr", "coda", "colorspace", "cowplot", "cvequality", "data.table", "dbplyr", "deldir", "devtools", "digest", "DT", "e1071", "evaluate", "expm", "flexmix", "FNN", "forcats", "geiger", "ggmap", "ggridges", "ggthemes", "git2r", "gstat", "haven", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "huxtable", "igraph", "jomo", "jtools", "kableExtra", "knitr", "labelled", "later", "lme4", "lmerTest", "magick", "maptools", "markdown", "MASS", "Matrix", "mclust", "mgcv", "mice", "mitml", "modelr", "nloptr", "openssl", "packrat", "pbapply", "prabclus", "processx", "ProjectTemplate", "ps", "psych", "purrr", "quantreg", "questionr", "R6", "raster", "RcppEigen", "RCurl", "readr", "readxl", "rgdal", "RgoogleMaps", "rio", "RJSONIO", "rmarkdown", "rmdformats", "robustbase", "rsconnect", "rstan", "rstanarm", "rstudioapi", "rvcheck", "sf", "shiny", "shinydashboard", "shinythemes", "spam", "spData", "StanHeaders", "stringi", "stringr", "survey", "survival", "testthat", "tidyr", "units", "urltools", "webshot", "xfun", "XML", "xts", "zip"))
citation('Momocs')
knitr::opts_chunk$set(echo = TRUE)
if(!require("igraph")) install.packages('geomorph', repos='http://cran.us.r-project.org')
if(!require("igraph")) install.packages('igraph', repos='http://cran.us.r-project.org')
if(!require("ggraph")) install.
if(!require("igraph")) install.packages('igraph', repos='http://cran.us.r-project.org')
if(!require("ggraph")) install.packages('ggraph', repos='http://cran.us.r-project.org')
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjency_matrix(A)
library("igraph", lib.loc="~/R/win-library/3.4")
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjency_matrix(A)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjaceency_matrix(A)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjacency_matrix(A)
plot(g)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjacency_matrix(A)
plot(G)
A <- rbind(c(0,0,1,1,0), c(1,0,0,0,1), c(0,0,0,1,0), c(0,1,0,0,1), c(1,1,0,0,1))
G <- graph_from_adjacency_matrix(A)
plot(G)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0))
G <- graph_from_adjacency_matrix(A)
plot(G)
A
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A"))
G2 <- graph_from_edgelist(el)
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A"))
G2 <- graph_from_edgelist(NG)
plot(G2)
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A")) #matrix creation (2:4)
NG #see NG
G2 <- graph_from_edgelist(NG)
plot(G2)
G3 <- graph_from_literal(A--B, B-+C), C-+A)
G3 <- graph_from_literal(A--B, B-+C, C-+A)
G3 <- graph_from_literal(A--B, B-+C, C-+A)
plot(G3)
G3 <- graph_from_literal(A+-B, B-+C, C-+A)
plot(G3)
G3 <- graph_from_literal(A+-B, B-+C, A-+C)
plot(G3)
df <- as.data.frame(NG)
G4 <- graph_from_data_frame(df)
plot(G4)
siteedges <- read.csv("sitelist.csv")
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
sites <- graph_from_data_frame(siteedges, directed = TRUE)
plot(sites)
sitevertices <- read.csv("sitevertices.csv")
sites <- graph_from_dataframe)sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_dataframe(sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(sitesedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
siteedges <- read.csv("sitelist.csv")
head(siteedges, n = 15)
sites <- graph_from_data_frame(siteedges, directed = TRUE)
plot(sites)
sitevertices <- read.csv("sitevertices.csv")
sites <- graph_from_data_frame(siteedges, directed = TRUE, vertices = sitevertices)
plot(sites)
sites
plot(sites)
siteDFs <- as_data_frame(sites, what = "both")
str(siteDFs)
write_graph(sites, "sites.graphml", format = "graphml")
ggraph(sites) + geom_node_point() + geom_edge_link()
library("ggraph", lib.loc="~/R/win-library/3.4")
ggraph(sites) + geom_node_point() + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "dendrogram") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed()
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed()
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link(aes(colour = Period))
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link(aes(colour = period))
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period, size = 2)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period, cex = 2)) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 2) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 20) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link()
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_minimal() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_minimal() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() + theme_bw() #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link(aes(colour = "gray")) #colour and size
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link() #colour and size
ggraph(sites) + geom_node_point() + geom_edge_link() #using nicely default
ggraph(sites, layout = "kk") + geom_node_point() + geom_edge_link() #using the kk algorithm
ggraph(sites, layout = "dendrogram", circular = TRUE) + geom_node_point() + geom_edge_diagonal() + coord_fixed() #circular dendrogram (if there were enough points)
ggraph(sites, layout = "kk") + geom_node_point(aes(shape = Period), cex = 5) + geom_edge_link() #or with shapes
ggraph(sites, layout = "kk") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() #or with colour(preset)
knitr::opts_chunk$set(echo = TRUE)
hairball
ggraph$hairball
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_link() #or with colour(preset)
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() #or with colour(preset)
if(!require("ggthemes")) install.packages('ggraph', repos='http://cran.us.r-project.org') #additional cosmetics
if(!require("ggthemes")) install.packages('ggthemes', repos='http://cran.us.r-project.org') #additional cosmetics
library('ggthemes')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + theme_solid #or with colour(preset)
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual('#44444', '#22222') #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#44444', '#22222')) #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) #or with colour(preset)
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear") + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc(alpha=..index..) + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + scale_edge_alpha('Edge direction', guide = 'edge_direction')
ggraph(sites, layout = "linear", circular = TRUE) + geom_node_point(aes(colour = Period), cex = 5) + geom_edge_arc() + coord_fixed() + scale_colour_manual(values=c('#bdbdbd', '#dfc27d')) + theme_graph() #or with colour(manual)
plot(sites, layout = layout.circle)
rglplot(sites, layout=1)
tkplot(sites, layout=layout.kamada.kawai)
tkplot(sites, layout=layout.kamada.kawai)
l <- layout=layout.kamda.kawai(sites)
l <- layout=layout.kamada.kawai(sites)
tkplot(sites, layout=layout.kamada.kawai)
l <- layout=layout.kamada.kawai(sites)
tkplot(sites, layout=layout.kamada.kawai)
install.packages("cchunts")
2 + 2
Christian <- 2
Christian
Christian + 2
require('igraph')
rm(Christian)
knitr::opts_chunk$set(echo = TRUE)
A <- rbind(c(0,0,1,1), c(1,0,0,0), c(0,0,0,1), c(0,1,0,0)) #matrix creation (4:4)
A
G <- graph_from_adjacency_matrix(A) #function to make a graph from the matrix
plot(G) #plot the matrix i.e. 'G'
NG <- rbind(c("A", "B"), c("B","A"), c("B", "C"), c("C","A")) #matrix creation (2:4)
NG #see NG
G2 <- graph_from_edgelist(NG) #function to make a graph from the edge list
plot(G2) #plot the matrix i.e. 'G2'
plot(G3) #plot the new graph
G3 <- graph_from_literal(A+-B, B-+C, A-+C) #textual description
plot(G3) #plot the new graph
df <- as.data.frame(NG) #creation of NG as a data frame
plot(G4) #plot the new graph
G4 <- graph_from_data_frame(df) #graph from data frame
plot(G4) #plot the new graph
siteedges <- read.csv("sitelist.csv", Header = TRUE) #read the .csv file of links ("from x to y")
siteedges <- read.csv("sitelist.csv") #read the .csv file of links ("from x to y")
head(siteedges, n = 15) #check the first fifteen entries
head(siteedges, n = 15) #check the first fifteen entries
sites <- graph_from_data_frame(siteedges, directed = TRUE) #graph from data frame
plot(sites) #plot graph
plot(sites) #plot graph
plot(sites) #plot graph
#Tree analysis
# Relocate to specific folder
outtree <- read.tree(file = "outtree")
install.packages("C:/Users/cshog/Downloads/GUImorph_1.0.2.05.19.2018.10.30.zip", repos = NULL, type = "win.binary")
library(GUImorph)
install.packages("Morpho",dependencies = TRUE)
library(GUImorph)
install.packages("tcltk2",dependencies = TRUE)
library(GUImorph)
GUImorph()
gm.results$coords
gm.results$Csize
gm.results$consensus
library('Binford')
library('binford')
Bethan <- LRB
head(Bethan)
View(Bethan)
Test <- LRBkey
View(Test)
install.packages("markdown")
install.packages("fdaPDE")
library('fdaPDE')
mesh<-create.MESH.2D(nodes=rbind(c(0, 0), c(0, 1), c(0.5, 0.5), c(1, 1), c(1, 0)),
segments=rbind(c(1, 2), c(2, 3), c(3, 4), c(4, 5), c(5, 1)), order=1)
## Plot it
plot(mesh)
## Creates the basis
FEMbasis = create.FEM.basis(mesh)
## Upload the Meuse data
data(MeuseData)
## Create a triangulation on the convex hull of these data,
## where each data location is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], order = 1)
## Plot the mesh
plot(mesh)
## Upload a domain boundary for these data
data(MeuseBorder)
## Create a constrained Delaunay triangulation with the provided boundary
## where each datalocation is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
## Plot the mesh
plot(mesh)
## Upload the Meuse data
data(MeuseData)
## Create a triangulation on the convex hull of these data,
## where each data location is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], order = 1)
## Plot the mesh
plot(mesh)
## Upload a domain boundary for these data
data(MeuseBorder)
## Create a constrained Delaunay triangulation with the provided boundary
## where each datalocation is a triangle vertex
mesh <- create.MESH.2D(nodes = MeuseData[,c(2,3)], segments = MeuseBorder, order = 1)
## Plot the mesh
plot(mesh)
## Upload a triangular mesh and plot it
data("mesh.2D.rectangular")
plot(mesh.2D.rectangular)
## Create a linear Finite Element basis
FEMbasis = create.FEM.basis(mesh.2D.rectangular)
## Define a sinusoidal function as expansion of this basis and plot it
coeff <- sin(mesh.2D.rectangular$nodes[,1])*cos(mesh.2D.rectangular$nodes[,2])
FEM_object<- FEM(coeff, FEMbasis)
plot(FEM_object)
## Upload a triangular mesh and plot it
data("mesh.2D.rectangular")
plot(mesh.2D.rectangular)
## Create a linear Finite Element basis
FEMbasis = create.FEM.basis(mesh.2D.rectangular)
## Define a sinusoidal function as expansion of this basis and plot it
coeff <- sin(mesh.2D.rectangular$nodes[,1])*cos(mesh.2D.rectangular$nodes[,2])
FEM_object<- FEM(coeff, FEMbasis)
plot(FEM_object)
library(ggplot2)
library(dplyr)
#a hopalong attractor
#ggplot theme blank canvas
opt = theme(legend.position  = "none",
panel.background = element_rect(fill="white"),
axis.ticks       = element_blank(),
panel.grid       = element_blank(),
axis.title       = element_blank(),
axis.text        = element_blank())
#attractor function
createTrajectory <- function(n, x0, y0, a, b, c) {
#pre-initialize vectors of length n
x <- vector(mode = "numeric", length = n)
y <- vector(mode = "numeric", length = n)
#starting values
x[1] <- x0
y[1] <- y0
#fill vectors with values
for(i in 2:n) {
x[i] <- y[i-1]-1-sqrt(abs(b*x[i-1]-c))*sign(x[i-1]-1)
y[i] <- a-x[i-1]-1
}
#make dataframe
data.frame(x = x, y = y)
}
#constants
a=2
b=1
c=8
v=3
#calculate positions and plot
df=createTrajectory(3000000, 0, 0, a, b, c)
ggplot(df, aes(x, y)) + geom_point(color="#1E1E1E", shape=46, alpha=.05) + opt
ggplot(df, aes(x, y)) + geom_point(color="#1E1E1E", shape=46, alpha=.05) + opt
library(bibliometrix)
biblioshiny()
install.packages(c("ggforce", "ggplot2", "ggsignif", "markdown", "quantreg", "xml2"))
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("Morpho")
detach("package:GUImorph", unload = TRUE)
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("tcltk2")
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
GUImorph()
detach("package:GUImorph", unload = TRUE)
great.friends <- c("Christian", "Kaylea", "Cory", "Emma", "Bethan")
call(great.friends)
great.friends
knit_with_parameters('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Articles/Illustration Error - In Prep/submission/finalised_submission/Hoggard_et_al_2019.Rmd')
dataset <- "https://github.com/CSHoggard/-Morph2019/practical_two.csv""
dataset <- "https://github.com/CSHoggard/-Morph2019/practical_two.csv"
dataset <-  read.csv(dataset, header = T)
library(GUImorph, lib.loc = "C:/Program Files/R/R-3.6.1/library")
install.packages("Rphylip")
R.Version()
if(!require("Momocs")) install.packages('geomorph', repos='http://cran.us.r-project.org')
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')
if(!require("ggtree")) install.packages('ggtree', repos='http://cran.us.r-project.org')
if(!require("ape")) install.packages('ape', repos='http://cran.us.r-project.org')
if(!require("Rphylip")) install.packages('Rphylip', repos='http://cran.us.r-project.org')
if(!require("tidytree")) install.packages('tidytree', repos='http://cran.us.r-project.org')
install.packages("ggsci")
library(ggsci)
scale_color_uchicago()
plot(scale_color_uchicago())
scale_color_uchicago()
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.1, size = 1, span = 1) +
theme_bw()
library(ggplot2)
p1 = ggplot(subset(diamonds, carat >= 2.2),
aes(x = table, y = price, colour = cut)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", alpha = 0.1, size = 1, span = 1) +
theme_bw()
p1 + scale_color_uchicago()
scale_color_uchicago()
scale_color_uchicago
d <- scale_color_uchicago
d <- scale_color_uchicago()
d <- scale_color_uchicago
# install.packages("devtools")
devtools::install_github("ropenscilabs/vitae")
install.packages('tinytex')
install.packages("devtools")
devtools::install_github("ropenscilabs/vitae")
install.packages('tinytex')
tinytex::install_tinytex()
tinytex::tinytex_root()
tinytex::tinytex_root()
library(tinytex)
library(vitae)
remove.packages("vitae", lib="~/R/win-library/3.6")
install.packages("vitae")
library(vitae)
---
---
name: Rob J Hyndman
address: "Department of Econometrics & Business Statistics,\\tabularnewline Monash University, VIC 3800, Australia."
www: robjhyndman.com
phone: +61 3 9905 5141
email: "Rob.Hyndman@monash.edu"
twitter: robjhyndman
github: robjhyndman
date: "`r format(Sys.time(), '%B %Y')`"
headcolor: "000088"
output:
vitae::hyndman:
keep_tex: yes
header_includes:
- \ExecuteBibliographyOptions{useprefix=true}
- renewcommand{\bibfont}{\normalfont\fontsize{10}{12.4}\sffamily}
---
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
unlink('C:/Users/cshog/Desktop/test_cache', recursive = TRUE)
knit_with_parameters('C:/Users/cshog/Desktop/test.Rmd')
install.packages("digest")
install.packages("scholar")
remove.packages("yaml", lib="~/R/win-library/3.6")
install.packages("yaml")
unlink('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/R_Projects/cv_csh/cv_csh/cv_csh_cache', recursive = TRUE)
install.packages(c("digest", "rlang"))
library(vitae)
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
unlink('Untitled/Untitled_cache', recursive = TRUE)
options(tinytex.verbose = TRUE)
install.packages("latexpdf")
library(latexpdf)
detach("package:latexpdf", unload = TRUE)
library(tinytex)
tinytex::install_tinytex()
unlink('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/R_Projects/cv_csh/cv_csh/cv_csh/cv_csh_cache', recursive = TRUE)
detach("package:tinytex", unload = TRUE)
library(tinytex)
library(tinytex)
tinytex::tlmgr_install("ly1")
unlink('C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/R_Projects/cv_csh/cv_csh/cv_csh/cv_csh_cache', recursive = TRUE)
---
name: Christian Steven
surname: Hoggard
position: "Visiting Fellow"
address: "Department of Archaeology and Anthropology, University of Southampton"
phone: +44 7913 352688
www: sites.google.com/site/christianhoggard
email: "C.Hoggard@soton.ac.uk"
twitter: CSHoggard
github: CSHoggard
date: "`r format(Sys.time(), '%B %Y')`"
output:
vitae::latexcv:
theme: "modern"
---
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')
if(!require("Momocs")) install.packages('geomorph', repos='http://cran.us.r-project.org')
if(!require("ggtree")) install.packages('ggtree', repos='http://cran.us.r-project.org')
if(!require("ape")) install.packages('ape', repos='http://cran.us.r-project.org')
if(!require("Rphylip")) install.packages('Rphylip', repos='http://cran.us.r-project.org')
if(!require("tidytree")) install.packages('tidytree', repos='http://cran.us.r-project.org')
if(!require("phytools")) install.packages('phytools', repos='http://cran.us.r-project.org')
if(!require("kohonen")) install.packages('kohonen', repos='http://cran.us.r-project.org')
if(!require("cowplot")) install.packages('cowplot', repos='http://cran.us.r-project.org')
backedpoints <- import_tps("TPS_BP_27_09_2019.tps", curves = TRUE) ### import .tps file
load("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/GitHub/-Bornholm_Study/-Bornholm_Study.Rproj")
install.packages("countdown")
install.packages("xaringan")
install.packages("countdown")
if(!require("Momocs")) install.packages('Momocs', repos='http://cran.us.r-project.org')
if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')
if(!require("cowplot")) install.packages('cowplot', repos='http://cran.us.r-project.org')
install.packages(c("BH", "bibtex", "bookdown", "broom", "callr", "car", "cli", "data.table", "DBI", "directlabels", "dplyr", "DT", "FactoMineR", "fansi", "farver", "geomorph", "gh", "hms", "jsonlite", "knitr", "latticeExtra", "leaps", "loo", "lpSolve", "lwgeom", "magick", "mime", "mnormt", "multcomp", "mvMORPH", "mvtnorm", "openxlsx", "pillar", "plyr", "pracma", "prettyunits", "psych", "quantreg", "R.utils", "raster", "RcppArmadillo", "rlang", "rmarkdown", "RRPP", "sf", "shinycssloaders", "sna", "spam", "SparseM", "stringi", "tidyr", "tidyselect", "tidytree", "tinytex", "tmap", "vctrs", "vitae", "xaringan", "xfun", "XML", "yaml", "zoo"))
install.packages("dplyr")
library(tidyverse)
library(ape)
library(Rphylip)
library(phangorn)
library(cowplot)
library(dendextend)
library(BiocManager)
library(ggtree)
dataset       <- read.csv("dataset_one.csv", header = TRUE, row.names = 1)
setwd("C:/Users/cshog/Dropbox/CHRISTIAN/Academic Work/Github/-Lithic_Illustrations")
